/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.bhs.gtk.screener.api;

import com.bhs.gtk.screener.model.Error;
import com.bhs.gtk.screener.model.Executable;
import com.bhs.gtk.screener.model.ExecutionRequest;
import com.bhs.gtk.screener.model.PatchModel;
import com.bhs.gtk.screener.model.ScreenerResult;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-09-25T06:41:13.746385900+05:30[Asia/Calcutta]")

@Api(value = "Execution", description = "the Execution API")
public interface ExecutionApi {

    @ApiOperation(value = "create new executable", nickname = "createExecutable", notes = "create new executable", response = ScreenerResult.class, tags={ "execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "executable created successfully.", response = ScreenerResult.class),
        @ApiResponse(code = 400, message = "Request is not understood.", response = Error.class) })
    @RequestMapping(value = "/v1/screener/{screenerId}/execution",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<ScreenerResult> createExecutable(@ApiParam(value = "payload to create executable" ,required=true )  @Valid @RequestBody ExecutionRequest body,@ApiParam(value = "",required=true) @PathVariable("screenerId") UUID screenerId);


    @ApiOperation(value = "get all executables of given screener", nickname = "getExecutables", notes = "get all executables of given screener", response = Executable.class, responseContainer = "List", tags={ "execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 206, message = "Request sucessfully processed.", response = Executable.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Request is not understood.", response = Error.class),
        @ApiResponse(code = 404, message = "Requested filter not found.", response = Error.class) })
    @RequestMapping(value = "/v1/screener/{screenerId}/execution",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Executable>> getExecutables(@ApiParam(value = "",required=true) @PathVariable("screenerId") UUID screenerId);


    @ApiOperation(value = "update executable", nickname = "updateExecutable", notes = "update executable of given id", response = Executable.class, tags={ "execution", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Executable  with give id is updated successfully.", response = Executable.class),
        @ApiResponse(code = 400, message = "Request is not understood.", response = Error.class),
        @ApiResponse(code = 404, message = "Requested screener not found.", response = Error.class) })
    @RequestMapping(value = "/v1/screener/execution/{executionId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Executable> updateExecutable(@ApiParam(value = "Payload to change executable of given Id. Only Note can be changed. " ,required=true )  @Valid @RequestBody PatchModel body,@ApiParam(value = "",required=true) @PathVariable("executionId") UUID executionId);

}
