/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.bhs.gtk.screener.api;

import com.bhs.gtk.screener.model.Error;
import com.bhs.gtk.screener.model.ExecutableDetailedResponse;
import com.bhs.gtk.screener.model.ExecutablePatchData;
import com.bhs.gtk.screener.model.ExecutableResponse;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-12-29T07:42:30.906286300+05:30[Asia/Calcutta]")

@Api(value = "Executable", description = "the Executable API")
public interface ExecutableApi {

    @ApiOperation(value = "get executable", nickname = "getExecutable", notes = "get executable", response = ExecutableResponse.class, tags={ "executable", })
    @ApiResponses(value = { 
        @ApiResponse(code = 206, message = "Request sucessfully processed.", response = ExecutableResponse.class),
        @ApiResponse(code = 400, message = "Request is not understood.", response = Error.class),
        @ApiResponse(code = 404, message = "Requested filter not found.", response = Error.class) })
    @RequestMapping(value = "/v1/executable/{executableId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExecutableResponse> getExecutable(@ApiParam(value = "",required=true) @PathVariable("executableId") UUID executableId);


    @ApiOperation(value = "get result of executable of given screener", nickname = "getResult", notes = "get result of executable of given screener", response = ExecutableDetailedResponse.class, tags={ "executable", })
    @ApiResponses(value = { 
        @ApiResponse(code = 206, message = "Request sucessfully processed.", response = ExecutableDetailedResponse.class),
        @ApiResponse(code = 400, message = "Request is not understood.", response = Error.class),
        @ApiResponse(code = 404, message = "Requested filter not found.", response = Error.class) })
    @RequestMapping(value = "/v1/executable/{executableId}/result",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ExecutableDetailedResponse> getResult(@ApiParam(value = "",required=true) @PathVariable("executableId") UUID executableId);


    @ApiOperation(value = "update executable", nickname = "updateExecutable", notes = "update executable of given id", response = ExecutableResponse.class, tags={ "executable", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Executable  with give id is updated successfully.", response = ExecutableResponse.class),
        @ApiResponse(code = 400, message = "Request is not understood.", response = Error.class),
        @ApiResponse(code = 404, message = "Requested screener not found.", response = Error.class) })
    @RequestMapping(value = "/v1/executable/{executableId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<ExecutableResponse> updateExecutable(@ApiParam(value = "Payload to change executable of given Id. Only Note can be changed. " ,required=true )  @Valid @RequestBody ExecutablePatchData body,@ApiParam(value = "",required=true) @PathVariable("executableId") UUID executableId);

}
