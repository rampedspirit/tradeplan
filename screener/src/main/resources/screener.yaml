openapi: 3.0.0
info:
  description: These are Screener service APIs
  version: 1.0.0
  title: Screener
servers:
  - url: 'http://localhost:5000/'
  - url: 'https://localhost:5000/'
paths:
  /v1/screener:
    post:
      tags:
        - screener
      summary: create new screener
      description: create new screener
      operationId: createScreener
      requestBody:
        description: payload to create screener
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScreenerCreateRequest'
        required: true
      responses:
        '201':
          description: screener created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenerResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - screener
      summary: get all screener
      description: get screener
      operationId: getAllScreeners
      responses:
        '200':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScreenerResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/v1/screener/{screenerId}':
    get:
      tags:
        - screener
      summary: get screener of given id
      description: get screener
      operationId: getScreener
      parameters:
        - in: path
          name: screenerId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ScreenerDetailedResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested filter not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - screener
      summary: update screener
      description: update screener of given id
      operationId: updateScreener
      parameters:
        - in: path
          name: screenerId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: >- 
         Payload to change screener of given Id.
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: '#/components/schemas/ScreenerPatchData'
        required: true
      responses:
        '200':
          description: Screener with give id is updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenerResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested screener not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - screener
      summary: delete
      description: delete screener of given id
      operationId: deleteScreener
      parameters:
        - in: path
          name: screenerId
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '204':
          description: screener with give id and all associated exectables of screener are deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScreenerResponse'
        '404':
          description: Requested screener not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  '/v1/screener/{screenerId}/run':     
    post:
      tags:
        - screener
      summary: run screener
      description: run screener at given marketTime
      operationId: runScreener
      parameters:
        - in: path
          name: screenerId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: payload to create executable
        content:
          application/json:
            schema:
                $ref: '#/components/schemas/ExecutableCreateRequest'
        required: true
      responses:
        '201':
          description: executable created successfully.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ScreenerDetailedResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
                
  '/v1/executable/{executableId}':                
    get:
      tags:
        - executable
      summary: get executable
      description: get executable
      operationId: getExecutable
      parameters:
        - in: path
          name: executableId
          schema:
            type: string
            format: uuid
          required: true            
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutableResponse'              
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested filter not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - executable
      summary: update executable
      description: update executable of given id
      operationId: updateExecutable
      parameters:
        - in: path
          name: executableId
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: >- 
         Payload to change executable of given Id. Only Note can be changed. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutablePatchData'
        required: true
      responses:
        '200':
          description: Executable  with give id is updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutableResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested screener not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'   
                

  '/v1/executable/{executableId}/result':
    get:
      tags:
        - executable
      summary: get result of executable of given screener
      description: get result of executable of given screener
      operationId: getResult
      parameters:
        - in: path
          name: executableId
          schema:
            type: string
            format: uuid
          required: true            
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutableDetailedResponse'              
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested filter not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'                 

components:
  schemas:
    ScreenerCreateRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: name of screener
        description:
          type: string
          description: description of screener
        watchListId:
          type: string
          format: uuid
          description: >-
            watch list identifier
        conditionId:
          type: string
          format: uuid
          description: >-
            condition identifier.
            
            
    ScreenerResponse:
      required:
        - name
      type: object
      properties:
        screenerId:
          type: string
          format: uuid
          description: >-
            screener identifier
        name:
          type: string
          description: name of screener
        description:
          type: string
          description: description of screener
        watchListId:
          type: string
          format: uuid
          description: >-
            watch list identifier
        conditionId:
          type: string
          format: uuid
          description: >-
            condition identifier.
          

    ScreenerDetailedResponse:
      required:
        - name
      type: object
      properties:
        screenerId:
          type: string
          format: uuid
          description: >-
            screener identifier
        name:
          type: string
          description: name of screener
        description:
          type: string
          description: description of screener
        watchListId:
          type: string
          format: uuid
          description: >-
            watch list identifier
        conditionId:
          type: string
          format: uuid
          description: >-
            condition identifier.
        executables:
          type: array
          items:
            $ref: '#/components/schemas/ExecutableResponse'
          description: all executables which are attached to the screener with given watchlist and condition

    ScreenerPatchData:
      type: object
      required:
        - operation
        - property
        - value
      properties:
        operation:
          type: string
          description: 'Action to be performed on given resource. '
          example: REPLACE
          enum:
            - REPLACE
        property:
          type: string
          description: >-
            The property of the json attribute to be replaced.
          example: NAME
          enum:
           - NAME
           - DESCRIPTION
           - WATCHLIST_ID
           - CONDITION_ID
        value:
          type: string
          description: The new value of the json attribute to be patched.
          
    
    ExecutableCreateRequest:
      required:
        - marketTime
      type: object
      properties:
        marketTime:
          type: string
          description: market time at which screener to be executed.
          format: date-time
        note:
          type: string
          description: note related to execution
        ScripNames:
          type: array
          items : 
            type: string
          description: scrip names.

    ExecutableResponse:
      required:
        - marketTime
      type: object
      properties:
        executableId:
         type: string
         format: uuid
         description: >-
            unique identifier of the execution, using which result can be obtained
        marketTime:
          type: string
          description: market time at which screener to be executed.
          format: date-time
        note:
          type: string
          description: note related to execution   
        status:
          $ref: '#/components/schemas/executableStatus'            
        numberOfScripForExecution:
          type: number
          description: total number of scrip attached to this executable for execution
        numberOfScripWithResultAvailable:
          type: number
          description: number of scrip attached this executable which are executed and have execution result.
          
    ExecutableDetailedResponse:
      required:
        - marketTime
      type: object
      properties:
        executableId:
         type: string
         format: uuid
         description: >-
            unique identifier of the execution, using which result can be obtained
        marketTime:
          type: string
          description: market time at which screener to be executed.
          format: date-time
        note:
          type: string
          description: note related to execution   
        status:
          $ref: '#/components/schemas/executableStatus'   
        numberOfScripForExecution:
          type: number
          description: total number of scrip attached to this executable for execution
        numberOfScripWithResultAvailable:
          type: number
          description: number of scrip attached this executable which are executed and have execution result.     
        result:
         type: array
         items:
           $ref: '#/components/schemas/ScripResult'   
           
    executableStatus:
       type: string
       enum: [QUEUED,RUNNING,COMPLETED]

    ScripResult:
      type: object
      properties:
       scripName:
         type: string
       status:
         type: string
         enum: [QUEUED,RUNNING,PASS,FAIL,ERROR]            

    ExecutablePatchData:
      title: executable patch data
      type: object
      required:
        - operation
        - property
        - value
      properties:
        operation:
          type: string
          description: 'Action to be performed on given resource. '
          example: REPLACE
          enum:
            - REPLACE
        property:
          type: string
          description: >-
            The property of the json attribute to be replaced.
          example: NOTE
          enum:
           - NOTE
        value:
          type: string
          description: The new value of the json attribute to be patched.
      
 
    Error:
      type: object
      properties:
        message:
          type: string
          description: brief information about error
        resolution:
          type: string
          description: possibly hints to solve the error
        errorCode:
          type: string
          description: pattern to unqiuely identify error root cause and origin.
          