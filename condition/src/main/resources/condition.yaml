openapi: 3.0.0
info:
  description: These are condition service APIs
  version: 1.0.0
  title: Condition
servers:
  - url: 'http://localhost:5001/'
  - url: 'https://localhost:5001/'
paths:
  /:
    get:
      tags:
        - condition
      summary: checks the health of service
      description: checks the health of service
      operationId: checkHealth
      responses:
        '200':
          description: >-
            Request sucessfully processed.
  /v1/condition:
    post:
      tags:
        - condition
      summary: create new condition
      description: create new condition
      operationId: createCondition
      requestBody:
        description: payload to create condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition'
        required: true
      responses:
        '201':
          description: Condition created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - condition
      summary: get all conditions
      description: get conditions
      operationId: getAllConditions
      responses:
        '200':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Condition'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/v1/condition/{id}':
    get:
      tags:
        - condition
      summary: get condition of given id
      description: get condition
      operationId: getCondition
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Condition'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested condition not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - condition
      summary: update condition
      description: update condition of given id
      operationId: updateCondition
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: payload to create Condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchModel'
        required: true
      responses:
        '200':
          description: condition with give id is updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested screener not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - condition
      summary: delete
      description: delete condition of given id
      operationId: deleteCondition
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '204':
          description: condition with give id is deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
        '404':
          description: Requested condition not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Condition:
      required:
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: >-
            unique identifier of the condition. It is auto-generated by system,
            API-client need not provide it during creation of screener. If
            provided the value will be ignored.
        name:
          type: string
          description: name of condition
        description:
          type: string
          description: description of condition
        code:
          type: string
          description: text representing condition code
        parseTree:
          type: string
          description: output after parsing grammar

    Error:
      type: object
      properties:
        message:
          type: string
          description: brief information about error
        resolution:
          type: string
          description: possibly hints to solve the error
        errorCode:
          type: string
          description: pattern to unqiuely identify error root cause and origin.
          
    PatchModel:
      title: Update Properties
      type: object
      properties:
        patchData:
          type: array
          description: attributes to be updated.
          items:
            $ref: '#/components/schemas/PatchData'
      description: >-
        All patch operations follow the json patch api standard. The patch
        object is provided by the user in the patch operation for the particular
        resource.
    PatchData:
      required:
        - operation
        - property
        - value
      type: object
      properties:
        operation:
          type: string
          description: 'Action to be performed on given resource. '
          example: REPLACE
          enum:
            - REPLACE
        property:
          type: string
          description: >-
            The property of the json attribute to be replaced.
          example: NAME
          enum:
           - NAME
           - DESCRIPTION
           - CODE
           - PARSE_TREE
        value:
          type: string
          description: The new value of the json attribute to be patched.
