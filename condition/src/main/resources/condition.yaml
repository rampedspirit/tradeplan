openapi: 3.0.0
info:
  description: These are condition service APIs
  version: 1.0.0
  title: Condition
servers:
  - url: 'http://localhost:5001/'
  - url: 'https://localhost:5001/'
paths:

  /v1/condition:
    post:
      tags:
        - condition
      summary: create new condition
      description: create new condition
      operationId: createCondition
      requestBody:
        description: payload to create condition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConditionRequest'
        required: true
      responses:
        '201':
          description: Condition created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionDetailedResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - condition
      summary: get all conditions
      description: get conditions
      operationId: getAllConditions
      responses:
        '200':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConditionResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/v1/condition/{id}':
    get:
      tags:
        - condition
      summary: get condition of given id
      description: get condition
      operationId: getCondition
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ConditionDetailedResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested condition not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - condition
      summary: update condition
      description: update condition of given id
      operationId: updateCondition
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: payload to create Condition
        content:
          application/json:
            schema:
              type: array
              items:
               $ref: '#/components/schemas/PatchData'
        required: true
      responses:
        '200':
          description: condition with give id is updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionDetailedResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested screener not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - condition
      summary: delete
      description: delete condition of given id
      operationId: deleteCondition
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '204':
          description: condition with give id is deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionDetailedResponse'
        '404':
          description: Requested condition not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  '/v1/condition/{id}/{marketTime}/{scripName}/result':  
    get:
      tags:
        - result
      summary: get result of conditions
      description: get result of conditions for given id, marketTime and scripName
      operationId: getResult
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: marketTime
          required: true
          schema:
            type: string
            description: date and time of market on which execution is performed 2007-12-03T10:15:30+01:00
        - in: path
          name: scripName
          required: true
          schema:
            type: string            
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ConditionResultResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested condition not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'  
  
components:
  schemas:
    ConditionRequest:
      required:
        - name
      type: object
      properties:
        name:
          type: string
          description: name of condition
        description:
          type: string
          description: description of condition
        code:
          type: string
          description: text representing condition code
        parseTree:
          type: string
          description: output after parsing grammar
          
    ConditionResponse:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: unique identifier of the condition.
        name:
          type: string
          description: name of condition
        description:
          type: string
          description: description of condition
          
    ConditionDetailedResponse:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: unique identifier of the condition.
        name:
          type: string
          description: name of condition
        description:
          type: string
          description: description of condition 
        code:
          type: string
          description: text representing condition code          
        filters:  
          type: array
          description: associated filters.
          items:
            $ref: '#/components/schemas/Filter'          

    Filter:
      required:
       - filterId
       - status
      type: object
      properties:
        filterId:
          type: string
          format: uuid
        status:
          type: string
          enum: [ACTIVE, UPDATED, DELETED]

    ConditionResultResponse:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: unique identifier of the condition.
        name:
          type: string
          description: name of condition
        description:
          type: string
          description: description of condition 
        code:
          type: string
          description: text representing condition code  
        marketTime:
          type: string
          description: market time at which screener to be executed.
          format: date-time
        scripName:
          type: string          
        conditionResult:
          type: string
          enum: [QUEUED, RUNNING, PASS, FAIL, ERROR]
        filtersResult:  
          type: array
          description: associated filters.
          items:
            $ref: '#/components/schemas/FilterResult'           

    FilterResult:
      required:
       - filterId
       - status
       - location
      type: object
      properties:
        filterId:
          type: string
          format: uuid
        location:
           $ref : '#/components/schemas/Location'
        status:
          type: string
          enum: [QUEUED, RUNNING, PASS, FAIL, ERROR]          

    Location:
      type: object
      properties:
        start:
          $ref : '#/components/schemas/Position'
        end:
          $ref : '#/components/schemas/Position'                 
          
    Position:
     type: object
     properties:
       offset:
         type: integer
       line:
         type: integer
       column:
         type: integer

    Error:
      type: object
      properties:
        message:
          type: string
          description: brief information about error
        resolution:
          type: string
          description: possibly hints to solve the error
        errorCode:
          type: string
          description: pattern to unqiuely identify error root cause and origin.
          
    PatchData:
      required:
        - operation
        - property
        - value
      type: object
      properties:
        operation:
          type: string
          description: 'Action to be performed on given resource. '
          example: REPLACE
          enum:
            - REPLACE
        property:
          type: string
          description: >-
            The property of the json attribute to be replaced.
          example: NAME
          enum:
           - NAME
           - DESCRIPTION
           - CODE
           - PARSE_TREE
        value:
          type: string
          description: The new value of the json attribute to be patched.
