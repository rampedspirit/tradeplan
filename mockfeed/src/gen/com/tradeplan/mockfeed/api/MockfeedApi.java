/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tradeplan.mockfeed.api;

import com.tradeplan.mockfeed.model.TokenError;
import com.tradeplan.mockfeed.model.TokenRequest;
import com.tradeplan.mockfeed.model.TokenResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-06-09T14:14:08.618671700+05:30[Asia/Calcutta]")

@Api(value = "Mockfeed", description = "the Mockfeed API")
public interface MockfeedApi {

    @ApiOperation(value = "get all symbols", nickname = "getAllSymbols", notes = "", response = byte[].class, tags={ "mockfeed", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request sucessfully processed.", response = byte[].class) })
    @RequestMapping(value = "/getAllSymbols",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getAllSymbols(@NotNull @ApiParam(value = "", required = true, allowableValues = "eq, fo, fut, mcx, all") @Valid @RequestParam(value = "segment", required = true) String segment,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "user", required = true) String user,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "password", required = true) String password,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "csv", required = true) Boolean csv,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "allexpiry", required = true) Boolean allexpiry);


    @ApiOperation(value = "get all symbols", nickname = "getBars", notes = "", response = byte[].class, tags={ "mockfeed", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request sucessfully processed.", response = byte[].class) })
    @RequestMapping(value = "/getbars",
        produces = { "text/plain" }, 
        method = RequestMethod.GET)
    ResponseEntity<byte[]> getBars(@ApiParam(value = "" ,required=true) @RequestHeader(value="bearer", required=true) String bearer,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "symbol", required = true) String symbol,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "from", required = true) String from,@NotNull @ApiParam(value = "", required = true) @Valid @RequestParam(value = "to", required = true) String to,@NotNull @ApiParam(value = "", required = true, allowableValues = "csv") @Valid @RequestParam(value = "response", required = true) String response,@NotNull @ApiParam(value = "", required = true, allowableValues = "1min, 2min, 3min, 5min, 10min, 15min, 30min, 60min") @Valid @RequestParam(value = "interval", required = true) String interval);


    @ApiOperation(value = "get authentication token", nickname = "getToken", notes = "", response = TokenResponse.class, tags={ "mockfeed", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Request sucessfully processed.", response = TokenResponse.class),
        @ApiResponse(code = 400, message = "Request not sucessfully processed.", response = TokenError.class) })
    @RequestMapping(value = "/token",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<TokenResponse> getToken(@ApiParam(value = ""  )  @Valid @RequestBody TokenRequest body);

}
