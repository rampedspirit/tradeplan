# This is a basic workflow to help you get started with Actions

name: Publish Webapp

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  workflow_dispatch:
    inputs:
      StackNamePrefix:
        required: true
        description: Prefix for Stack Name

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build_and_deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      # As you can see below we are using matrix.node-version => it means it will execute for all possible combinations
      # provided matrix keys array(in our case only one kye => node-version)
      - uses: actions/checkout@v2
      
      #patch cognito user pool id
      - name: Fetch cognito cloudformation stack info for user pool id
        id: cognitoStackInfoForUserPoolId
        run: echo ::set-output name=USER_POOL_ID::$(aws cloudformation --region ap-south-1 describe-stacks --stack-name ${{ github.event.inputs.StackNamePrefix }}-COGNITO-Stack --query Stacks[0].Outputs[?OutputKey=='userPoolId'].OutputValue --output text)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'ap-south-1'
      - name: Replace user pool id
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "userPoolIdValue"
          replace: "${{ steps.cognitoStackInfoForUserPoolId.outputs.USER_POOL_ID }}"
          include: "**environment.prod.ts"

      #patch cognito webclient id
      - name: Fetch cognito cloudformation stack info for webclient id
        id: cognitoStackInfoForWebClientId
        run: echo ::set-output name=WEBCLIENT_ID::$(aws cloudformation --region ap-south-1 describe-stacks --stack-name ${{ github.event.inputs.StackNamePrefix }}-COGNITO-Stack --query Stacks[0].Outputs[?OutputKey=='userPoolWebClientId'].OutputValue --output text)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'ap-south-1'
      - name: Replace webclient id
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "userPoolWebClientIdValue"
          replace: "${{ steps.cognitoStackInfoForWebClientId.outputs.WEBCLIENT_ID }}"
          include: "**environment.prod.ts"

      # patch app Url with the actual value
      - name: Fetch app cloudformation stack info
        id: appStackInfo
        run: echo ::set-output name=RAW_APP_URL::$(aws cloudformation --region ap-south-1 describe-stacks --stack-name ${{ github.event.inputs.StackNamePrefix }}-ECS-APP-Stack --query Stacks[0].Outputs[0].OutputValue)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'ap-south-1'
      - name: Fix raw app url
        id: fixUrl
        run: |
          APP_URL=${{ steps.appStackInfo.outputs.RAW_APP_URL }}
          echo "$APP_URL" | tr -d '"'
          echo ::set-output name=APP_URL::$APP_URL
      - name: Replace application load balancer url
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "appUrl"
          replace: http://${{ steps.fixUrl.outputs.APP_URL }}
          include: "**environment.prod.ts"      
          
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/greentick-webapp

      # Install the node modules
      - name: NPM Install
        run: npm install
        working-directory: frontend/greentick-webapp        

      # Create production build
      - name: Production Build
        run: npm run build -- --prod # This is equivalent to 'ng build --prod'
        working-directory: frontend/greentick-webapp

      # Deploy to S3
      # This is a third party action used to sync our production build app with the AWS S3 bucket
      # For security purpose I am using secrets configured in project repo setting.
      - name: Fetch s3 bucket name
        id: s3BucketInfo
        run: echo ::set-output name=S3_BUCKET_NAME::$(aws cloudformation --region ap-south-1 describe-stacks --stack-name ${{ github.event.inputs.StackNamePrefix }}-StaticSite-Stack --query Stacks[0].Outputs[0].OutputValue)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'ap-south-1'
      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@v0.5.1
        with:
          # --acl public read => makes files publicly readable(i.e. makes sure that your bucket settings are also set to public)
          # --delete => permanently deletes files in S3 bucket that are not present in latest build
          args: --acl public-read --delete
        env:
          AWS_S3_BUCKET: ${{ steps.s3BucketInfo.outputs.S3_BUCKET_NAME }} # S3 bucket name
          # note: use IAM role with limited role for below access-key-id and secret-access-key
          AWS_ACCESS_KEY_ID: ${{ secrets.REPO_AWS_ACCESS_KEY_ID }} # Access Key ID
          AWS_SECRET_ACCESS_KEY: ${{ secrets.REPO_AWS_SECRET_ACCESS_KEY }} # Access Secret Key
          SOURCE_DIR: "frontend/greentick-webapp/dist/greentick-webapp" # build folder
