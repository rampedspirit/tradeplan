openapi: 3.0.0
info:
  description: These are filter service APIs
  version: 1.0.0
  title: Filter
servers:
  - url: 'http://localhost:5000/'
  - url: 'https://localhost:5000/'
paths:
  /v1/filter:
    post:
      tags:
        - filter
      summary: create new filter
      description: create new filter
      operationId: createFilter
      requestBody:
        description: payload to create filter
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilterRequest'
        required: true
      responses:
        '201':
          description: Filter created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - filter
      summary: get all filter
      description: get filters
      operationId: getAllFilters
      responses:
        '200':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FilterResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  '/v1/filter/{id}':
    get:
      tags:
        - filter
      summary: get filter of given id
      description: get filter
      operationId: getFilter
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '206':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/FilterResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested filter not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - filter
      summary: update filter
      description: update filter of given id
      operationId: updateFilter
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      requestBody:
        description: payload to create filter
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/PatchData'
        required: true
      responses:
        '200':
          description: Filter with give id is updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested screener not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - filter
      summary: delete
      description: delete filter of given id
      operationId: deleteFilter
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        '204':
          description: filter with give id is deleted successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FilterResponse'
        '404':
          description: Requested filter not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
  '/v1/filter/{filterId}/{marketTime}/{scripName}/result':
    get:
      tags:
        - filter
      summary: get filter result 
      description: get filter result 
      operationId: getFilterResult
      parameters:
        - in: path
          name: filterId
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: marketTime
          required: true
          schema:
            type: string
        - in: path
          name: scripName
          required: true
          schema:
            type: string                
            
      responses:
        '200':
          description: >-
            Request sucessfully processed.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/FilterResultResponse'
        '400':
          description: Request is not understood.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Requested filter not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                
                

components:
  schemas:
    FilterRequest:
      required:
        - name
        - code
        - parseTree
      type: object
      properties:
        name:
          type: string
          description: name of filter that is unqiue across the application
        description:
          type: string
          description: description of filter
        code:
          type: string
          description: text representing filter code
        parseTree:
          type: string
          description: output after parsing grammar  
          
    FilterResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: >-
            unique identifier of the filter. It is auto-generated by system,
            API-client need not provide it during creation of screener. If
            provided the value will be ignored.
        name:
          type: string
          description: name of filter that is unqiue across the application
        description:
          type: string
          description: description of filter
        code:
          type: string
          description: text representing filter code

    FilterResultResponse:
      type: object
      properties:
        filterId:
          type: string
          format: uuid   
        marketTime:
          type: string
          format: date-time
        scripName:
          type: string 
        filterResult:
          type: string
          enum: [QUEUED, RUNNING, PASS, FAIL, ERROR]
        expressionResults:
          type: array
          items:
            $ref: '#/components/schemas/ExpressionResultResponse'
 
    ExpressionResultResponse:
      type: object
      properties:
        type:
          type: string
          enum: [COMPARE_EXPRESSION, ARITHEMETIC_EXPRESSION]
        location:
          type: array
          items:
           $ref : '#/components/schemas/Location'
        result:
          oneOf:
           - type: string
           - type: number      

    Location:
      type: object
      properties:
        start:
          $ref : '#/components/schemas/Position'
        end:
          $ref : '#/components/schemas/Position'                 

    Position:
     type: object
     properties:
       offset:
         type: integer
       line:
         type: integer
       column:
         type: integer

    PatchData:
      required:
        - operation
        - property
        - value
      type: object
      properties:
        operation:
          type: string
          description: 'Action to be performed on given resource. '
          example: REPLACE
          enum:
            - REPLACE
        property:
          type: string
          description: >-
            The property of the json attribute to be replaced.
          example: NAME
          enum:
           - NAME
           - DESCRIPTION
           - CODE
           - PARSE_TREE
        value:
          type: string
          description: The new value of the json attribute to be patched.

    Error:
      type: object
      properties:
        message:
          type: string
          description: brief information about error
        resolution:
          type: string
          description: possibly hints to solve the error
        errorCode:
          type: string
          description: pattern to unqiuely identify error root cause and origin.          
